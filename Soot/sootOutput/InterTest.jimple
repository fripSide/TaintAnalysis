public class InterTest extends java.lang.Object
{

    public void invoke1(int, int)
    {
        InterTest this;
        int a, b, c, temp$1, temp$4, i;
        float temp$2, temp$5;
        HelloWorld temp$3, temp$6;
        int[] temp$7;
        java.io.PrintStream temp$10, temp$11;

        this := @this: InterTest;

        a := @parameter0: int;

        b := @parameter1: int;

        temp$1 = a + b;

        c = temp$1 + 0;

        temp$2 = virtualinvoke this.<InterTest: float invoke2(int)>(c);

        temp$3 = new HelloWorld;

        temp$4 = (int) temp$2;

        specialinvoke temp$3.<HelloWorld: void <init>(int)>(temp$4);

        virtualinvoke temp$3.<HelloWorld: void invoke3()>();

        temp$5 = 2.0F * temp$2;

        temp$6 = virtualinvoke this.<InterTest: HelloWorld getClass(float)>(temp$5);

        virtualinvoke temp$6.<HelloWorld: void invoke(int)>(c);

        virtualinvoke temp$6.<HelloWorld: void invoke3()>();

        temp$7 = virtualinvoke this.<InterTest: int[] invoke4(int,HelloWorld)>(2, temp$6);

        i = temp$7[0];

        temp$10 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke temp$10.<java.io.PrintStream: void println(java.lang.Object)>(temp$7);

        temp$11 = <java.lang.System: java.io.PrintStream out>;

        virtualinvoke temp$11.<java.io.PrintStream: void println(int)>(i);

        return;
    }

    private final HelloWorld getClass(float)
    {
        InterTest this;
        float f;
        HelloWorld temp$0;
        int temp$1;

        this := @this: InterTest;

        f := @parameter0: float;

        temp$0 = new HelloWorld;

        temp$1 = (int) f;

        specialinvoke temp$0.<HelloWorld: void <init>(int)>(temp$1);

        return temp$0;
    }

    private final int[] invoke4(int, HelloWorld)
    {
        InterTest this;
        int i, temp$0;
        HelloWorld h;
        int[] array;

        this := @this: InterTest;

        i := @parameter0: int;

        h := @parameter1: HelloWorld;

        array = newarray (int)[3];

        temp$0 = virtualinvoke h.<HelloWorld: int getField()>();

        array[0] = temp$0;

        array[1] = i;

        array[2] = 0;

        return array;
    }

    public float invoke2(int)
    {
        InterTest this;
        int c, temp$0;
        float temp$1;

        this := @this: InterTest;

        c := @parameter0: int;

        temp$0 = c * c;

        temp$1 = (float) temp$0;

        return temp$1;
    }

    public static void main(java.lang.String[])
    {
        java.lang.String[] args;
        InterTest temp$0;
        java.lang.String temp$3;
        int temp$4;

        args := @parameter0: java.lang.String[];

        temp$0 = new InterTest;

        specialinvoke temp$0.<InterTest: void <init>()>();

        temp$3 = args[0];

        temp$4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>(temp$3);

        virtualinvoke temp$0.<InterTest: void invoke1(int,int)>(temp$4, 2);

        return;
    }

    public void <init>()
    {
        InterTest this;

        this := @this: InterTest;

        specialinvoke this.<java.lang.Object: void <init>()>();

        return;
    }
}
